[include]
  path = .gitconfig-local

[core]
  attributesfile = ~/.gitattributes
  excludesfile = ~/.gitignore
  pager = delta

[interactive]
  diffFilter = delta --color-only

[delta]
  navigate = true  # use n and N to move between diff sections
  side-by-side = true
  ; dark = true      # or light = true, or omit for auto-detection

[merge]
  conflictstyle = zdiff3

[user]
  name = Steven Weller
  email = github@suweller.com

[github]
  user = suweller

[branches]
  main = master
  keep = "(master|develop|HEAD)$"

[alias]
  aliases = !git config --global --get-regexp ^alias | sed -e 's/^alias./  /'
  cloc = !cloc `git ls-files`
  c = commit --verbose
  co = checkout --quiet
  s = status --short --branch
  d = diff
  a = add --patch
  b = branch --verbose

  ba = !git for-each-ref \
    --sort=authordate refs/remotes \
    --format='\
%(color:red)%(objectname:short) \
%(align:20,left)%(color:green)%(authordate:relative)%(end) \
%(align:20,left)%(color:blue)%(authorname)%(end) \
%(color:reset)%(refname:strip=3)' \
    | rg --invert-match `git config branches.keep` \

  stale = !git ba | rg --invert-match '(second|minute|hour|day)s ago'

  l = log \
    --decorate=short \
    --format='\
%C(red)%h %C(reset)\
%C(green)%<(6,trunc)%cr %C(reset)\
%C(blue)%<(20,trunc)%an %C(reset)\
%<(72,trunc)%s \
%C(auto)%D%C(reset)'
  ll = !git l --numstat $@

  base = !git checkout `git config branches.main`
  branch-head = symbolic-ref --short HEAD
  branch-base = !git merge-base --fork-point `git config branches.main`
  branch-rebase = !git rebase `git config branches.main`
  branch-merges-behind = !git l `git branch-base`...`git config branches.main`
  branch-stat = !git diff --stat `git branch-base` HEAD^
  branch-l = !git l `git branch-base`...HEAD
  branch-lint = !rubocop-git --display-cop-names `git branch-base` HEAD
  branch-ls-touched = "! ( \
      git -c color.status=always status \
        --short \
        --untracked-files=all && \
        git diff --name-only \
          `git branch-base` \
          | awk '{ print \"\\033[34mc_\\033[0m \"$1; }' \
    ) \
    "
  branch-ls-files = "! ( \
      git branch-ls-touched \
        && \
      git ls-files \
        | awk '{ print \"\\033[90mo_\\033[0m \"$1; }' \
    ) \
    | awk '{ print NR-1 \" \" $0}' \
    | uniq -f 2 \
    | sort --key=3 --unique \
    | sort --key=1 --numeric-sort --unique \
    | sed -E \"s/^[0-9]* //\" \
    "
  branch-summary = "! \
    if [ `git branch-merges-behind | wc -c` -eq 0 ]; then \
      echo \"No new merges on `git config branches.main`\"; \
    else \
      echo \"New merges on `git config branches.main`:\"; \
      git branch-merges-behind; \
    fi; \
    echo \"\"; \
    if [ `git branch-l | wc -c` -eq 0 ]; then \
      echo \"No commits on `git branch-head`\"; \
    else \
      git branch-stat; \
      echo \"\"; \
      git branch-l; \
    fi \
    "

  commit-words =  ! git log --format='%<(72,trunc)%s' \
    | tr -s '[:space:]' '\n' \
    | sort \
    | uniq
  ctags = !.git/hooks/ctags $@
  ctags-bundle = !.git/hooks/ctags-bundle

  doge = "!f() { \
    git log --pretty=format:%s \
      | awk '{ \
        doge_words = \"wow,very,much,such,so,many\"; \
        num_words = split(doge_words, doge_array, \",\"); \
        n = int(rand() * 60); while (n--) printf(\" \"); \
        n = split($0, a, \" \"); \
        printf(\"%s %s\\n\", doge_array[int(rand() * num_words) + 1], a[int(rand() * n) + 1]); \
      }'; \
    }; f"

  ed = !$EDITOR -p `git diff --name-only $@ | uniq`

  who = shortlog --numbered --summary --

  merge-find = !sh -c ' \
    commit=$0 \
    && branch=${1:-HEAD} \
    && ( \
      git rev-list $commit..$branch --ancestry-path | cat -n \
      && git rev-list $commit..$branch --first-parent | cat -n \
    ) \
    | sort --key=2 \
    | uniq -f1 -d \
    | sort -n \
    | tail -1 \
    | cut -f2 \
    '

  merge-show = !sh -c ' \
    merge=`git merge-find $0 $1` \
    && [ -n \"$merge\" ] \
    && branches=$(git l $merge^..$merge | fzf --ansi) \
    && [ -n \"$branches\" ] \
    && open `git hub-url`/commit/` \
    echo $branches | rg --only-matching \"[0-9a-f]*\" \
    | head -1 \
    ` \
    '

  ; hub-compare = !open https://github.com/$0/compare/$1...$2
  hub-url = !echo https://github.com/` \
    git remote --verbose \
    | rg --pcre2 --only-matching \"(?<=git@github.com:)(.*)(?=\\.git \\(push\\))\" \
    `
  hub-pull-request = !open \
    `git hub-url`/compare/`git config branches.main`...`git branch-head`

  sup = "!for branch in `git branch --no-merged`; do \
    git l $branch ^`git config branches.main`; \
    echo ''; \
    done \
    "
  x = !sh -c 'git $1 HEAD ^`git merge-base --fork-point $0` $2'
  rubocop = !bin/rubocop-git `git branch-base` HEAD
  nuke = !sh -c ' \
    git branch \
    | grep --invert-match \"\\*\" \
    | cut -c 3- \
    | fzf --multi --preview=\"git l {} --\" \
    | xargs git branch --delete --force \
    '

[push]
  default = current

[init]
  templatedir = ~/.git_template

[diff]
  # For Github-style word diffs
  wordRegex = [^[:space:]]

[color]
  ui = auto
  interactive = auto

[color "diff"]
  # Color syntax: <foreground> <background>
  # So "normal red" is normal foreground, red background
  # BUT bold is a modifier, so "bold green red" means
  #   "bold green" foreground, red background
  whitespace = red reverse
  plain = white
  meta = cyan
  frag = magenta bold
  old = red
  new = green
  commit = yellow

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[pull]
  rebase = true

[filter "lfs"]
  clean = git lfs clean %f
  smudge = git lfs smudge %f
  required = true

[merge]
  tool = vimdiff

[merge "railsschema"]
  name = newer Rails schema version
  driver = "ruby -e '\n\
    system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
    b = File.read(%(%A))\n\
    b.sub!(/^<+ .*\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n=+\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n>+ .*/) do\n\
      %(ActiveRecord::Schema.define(:version => #{[$1, $2].max}) do)\n\
    end\n\
    File.open(%(%A), %(w)) {|f| f.write(b)}\n\
    exit 1 if b.include?(%(<)*%L)'"
