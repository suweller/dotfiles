[core]
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes
  pager = less --raw-control-chars --quit-if-one-screen --no-init

[user]
  name = Steven Weller
  email = github@suweller.com

[github]
  user = suweller

[alias]
  aliases = !git config --global --get-regexp ^alias | sed -e 's/^alias./  /'
  c = commit --verbose
  co = checkout
  s = status --short --branch
  d = diff
  a = add --patch
  b = branch
  today = log --stat --since='1 Day Ago' --graph --pretty=oneline --abbrev-commit --date=relative
  l = log --pretty=format:'  %Cred%h %Cgreen%<(6,trunc)%cr %Cblue%<(8,trunc)%an %Creset%<(51,trunc)%s %Cred%<(20)%d%Creset'
  ctags = !.git/hooks/ctags
  ctags-bundle = !.git/hooks/ctags-bundle
  ed = !$EDITOR `git diff --name-only $@| uniq`
  authors = shortlog --numbered --summary
  find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
  show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"
  wazzup = "!sh -c 'for branch in $(git branch --no-merged); do echo $branch && git l $branch ^$(git symbolic-ref HEAD) --no-merges; done'"

[push]
  default = current

[init]
  templatedir = ~/.git_template

[merge]
  tool = vimdiff

[diff]
  # For Github-style word diffs
  wordRegex = [^[:space:]]

[color]
  ui = true

[color "diff"]
  # Color syntax: <foreground> <background>
  # So "normal red" is normal foreground, red background
  # BUT bold is a modifier, so "bold green red" means
  #   "bold green" foreground, red background
  whitespace = red reverse
  plain = white
  meta = cyan
  frag = magenta bold
  old = red
  new = green
  commit = yellow

[pull]
  rebase = true

[filter "lfs"]
  clean = git lfs clean %f
  smudge = git lfs smudge %f
  required = true

[merge "railsschema"]
  name = newer Rails schema version
  driver = "ruby -e '\n\
    system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
    b = File.read(%(%A))\n\
    b.sub!(/^<+ .*\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n=+\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n>+ .*/) do\n\
      %(ActiveRecord::Schema.define(:version => #{[$1, $2].max}) do)\n\
    end\n\
    File.open(%(%A), %(w)) {|f| f.write(b)}\n\
    exit 1 if b.include?(%(<)*%L)'"
