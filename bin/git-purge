#!/bin/bash
black=`tput setaf 0`
red=`tput setaf 1`
green=`tput setaf 2`
reset=`tput sgr0`
inv=`tput setab 1`

current_branch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
if [ "$current_branch" != "master" ]; then
  echo "${red}WARNING: You are on branch ${black}${inv}$current_branch${reset}${red}, NOT master.${reset}"
fi
echo "Fetching merged branches..."
git remote prune origin
remote_branches=$(git branch -r --merged | grep -v '/master$' | grep -v '/production$' | grep -v "/$current_branch$")
local_branches=$(git branch --merged | grep -v 'master$' | grep -v 'production$' | grep -v "$current_branch$")

if [ -z "$remote_branches" ] && [ -z "$local_branches" ]; then
  echo "${red}No existing branches have been merged into${reset} ${black}${inv}$current_branch${reset}."

else
  echo "${red}This will remove the following branches:${reset}"
  echo "$remote_branches"
  echo "$local_branches"

  read -p "Continue? Yes/No: " -n 1 choice
  echo

  if [ "$choice" == "y" ] || [ "$choice" == "Y" ]; then
    # Remove remote branches
    git push origin `echo $remote_branches | sed 's/origin\//:/g' | tr -d '\n'`
    # Remove local branches
    git branch -d `git branch --merged | grep -v 'master$' | grep -v "$current_branch$" | sed 's/origin\///g' | tr -d '\n'`
    exit 0
  fi
  echo "${red}No branches removed.${reset}"
  exit 1
fi
