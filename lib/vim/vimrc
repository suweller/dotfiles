" vim:fdm=marker
set nocompatible      " We're running VIM, not vi
filetype off          " Turn off _before_ loading all Plugins
let mapleader = " "
inoremap § <ESC>

set rtp+=~/.vim/bundle/vundle.vim/
call vundle#begin()
Plugin 'gmarik/vundle.vim'
Plugin 'pangloss/vim-javascript' " Highlighter
Plugin 'kchmck/vim-coffee-script' " Highlighter
Plugin 'leshill/vim-json' " Highlighter
Plugin 'nono/vim-handlebars' " Highlighter
Plugin 'slim-template/vim-slim' " Highlighter
Plugin 'tpope/vim-haml' " Highlighter
Plugin 'tpope/vim-markdown' " Highlighter
Plugin 'vim-ruby/vim-ruby' " Ruby: Motions, Text Objects, Access Modifier Indentation {{{
let g:ruby_indent_access_modifier_style = 'outdent'
" }}}
Plugin 'nathanaelkane/vim-indent-guides' " Highlighter, Indentation {{{
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
let g:indent_guides_indent_levels = 6
" }}}
Plugin 'nanotech/jellybeans.vim'
Plugin 'altercation/solarized', {'rtp': 'vim-colors-solarized'}
Plugin 'tpope/vim-fugitive' " Git: command Integration {{{
noremap <LEADER>gb :Gblame<CR>
nnoremap <LEADER>gs :Gstatus<CR>
" }}}
Plugin 'tpope/vim-rails' " Ruby Util Rails: Project Management {{{
let g:rails_projections = {
\ "app/presenters/*_presenter.rb": {
\   "command": "presenter",
\   "affinity": "model",
\   "alternate": ["unit/presenters/%s_presenter_spec.rb", "spec/presenters/%s_presenter_spec.rb"],
\   "related": "app/models/%s.rb",
\   "template": "class %SPresenter\nend"
\ },
\ "app/assets/javascripts/*.js.coffee": { "alternate": "spec/javascripts/%s_spec.js.coffee" },
\ "spec/javascripts/*_spec.js.coffee": { "alternate": "app/assets/javascripts/%s.js.coffee" },
\ "spec/factories/*.rb": {
\   "command":   "factory",
\   "affinity":  "collection",
\   "alternate": "app/models/%i.rb",
\   "related":   "db/schema.rb#%s",
\   "test":      ["unit/models/%i_test.rb", "spec/models/%i_spec.rb"],
\   "template":  "FactoryGirl.define do\n  factory :%i do\n  end\nend",
\   "keywords":  "factory sequence"
\ }}
" }}}
" Plugin 'tpope/vim-bundler' " Ruby Util Plugin: Gem Ctags
Plugin 'tpope/vim-rake' " Ruby Util Non-Rails: Plain ruby project management
Plugin 'danchoi/ri.vim' " Ruby: Quick access to Ruby documentation
Plugin 'GutenYe/gem.vim' " Ruby: Gem Project Management
Plugin 'thoughtbot/vim-rspec' " Ruby: +Rspec runner Integration {{{
let g:rspec_command='Dispatch ./bin/rspec {spec}'
map <Leader>sf :call RunCurrentSpecFile()<CR>
map <Leader>sn :call RunNearestSpec()<CR>
map <Leader>sl :call RunLastSpec()<CR>
map <Leader>sa :call RunAllSpecs()<CR>
" }}}
Plugin 'AndrewRadev/switch.vim' " Util: Switch between predefined replacements (true <-> false) {{{
autocmd FileType ruby let b:switch_custom_definitions = [
  \   {
  \     'have_no_\(\w\+\)': 'have_\1',
  \     'have_\(\w\+\)': 'have_no_\1'
  \   }
  \ ]
nnoremap - :Switch<cr>
" }}}
Plugin 'christoomey/vim-tmux-navigator' " Util: Seamless movement between VIM and tmux splits
Plugin 'kien/ctrlp.vim' " Util: File Finder {{{
let g:ctrlp_switch_buffer = 2
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.hg$\|\.svn$|^vendor$|^coverage$|^tmp$|^rdoc$|',
  \ 'file': '\.png$\|\.jpg$\|\.gif$|\.DS_Store',
  \ }
let g:ctrlp_max_depth = 10      " Directory depth to recurse into when scanning
let g:ctrlp_open_new_file = 't' " open files in new tab
" Use ag in CtrlP for listing files. fast enough not to use caching
" brew install the_silver_searcher
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif
Plugin 'tpope/vim-vinegar'
" }}}
Plugin 'nvie/vim-togglemouse' " Util: Toggle mouse for vim or terminal
Plugin 'scrooloose/syntastic' " Util: Code lint {{{
let g:syntastic_enable_signs=1
let g:syntastic_error_symbol='☠'
let g:syntastic_warning_symbol='☹'
let g:syntastic_style_error_symbol='⚠'
" }}}
Plugin 'tpope/vim-abolish' " Util: Pluralize (:crl), SnakeCase <-> camel_case (:crt), Replace (Subvert), made easy
Plugin 'tpope/vim-commentary' " Util: (Un)Comment made easy
Plugin 'tpope/vim-dispatch' " Util: Allow asynchronous tasks to be dispatched
Plugin 'tpope/vim-endwise' " Util: 'wisely' add `end` after `if` `do` etc.
Plugin 'vim-scripts/bufkill.vim' " Util: Kill buffers without closing splits
Plugin 'tpope/vim-afterimage' " Util: Edit (small) images
Plugin 'vimwiki' " Util: Nice way to take and organise notes {{{
let g:vimwiki_list = [{'path': '~/vimwiki/work/'}, {'path': '~/vimwiki/play/'}]
" }}}
Plugin 'tpope/vim-rbenv' " Util: rbenv.vim
Plugin 'tpope/vim-surround' " Util: quoting/parenthesizing Enhancements
Plugin 'tpope/vim-unimpaired' " Util: brakety Things
Plugin 'godlygeek/tabular' " Util: vertically aligning things (not for code)
Plugin 'kana/vim-textobj-user' " Motion: Custom text objects
Plugin 'nelstrom/vim-textobj-rubyblock' " Motion: Ruby text objects
Plugin 'lmeijvogel/vim-yaml-helper' " Util: YAML Navigation

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on " Turn on _after_ loading all Plugins

set t_Co=256

if &t_Co > 2 || has('gui_running')
  syntax on
endif
if &t_Co == 256 || has('gui_running')
  let g:jellybeans_use_lowcolor_black = 0
  let g:jellybeans_background_color_256=0 " truly black background
  let g:solarized_termcolors=256
  let g:solarized_termtrans=1
  colorscheme jellybeans
endif

func! SusColorTweaks()
  highlight VertSplit    ctermbg=16  ctermfg=236
  highlight LineNr       ctermfg=237 ctermbg=0
  highlight TabLineFill  ctermbg=16  ctermfg=236 cterm=underline
  highlight TabLine      ctermbg=16  ctermfg=236 cterm=underline
  highlight TabLineSel   ctermbg=234 ctermfg=255
  highlight StatusLine   ctermbg=234 ctermfg=64
  highlight StatusLineNC ctermbg=233 ctermfg=244
  highlight Folded       ctermbg=234 ctermfg=244

  highlight ColorColumn  ctermbg=233
  highlight IndentGuidesOdd  ctermbg=233
  highlight IndentGuidesEven ctermbg=16
  highlight clear SignColumn

  " highlights all not yet matched repeating blocks of whitespace
  " autocmd FileType * highlight ExcessiveWhitespace ctermbg=red guibg=red
  " autocmd FileType * 2match ExcessiveWhitespace /\>\s\s\+\</
endfunc
au VimEnter,ColorScheme * call SusColorTweaks()
" }}}

" Cursor on a command word and let vim help you: `:help <C-R><C-W>`
set viminfo='10,f1,<100,:20,@20,/20,h,n~/.vim/.viminfo "-- Files & Directories {{{
"           |   |  |    |   |   |   | +-> Where to save the viminfo files
"           |   |  |    |   |   |   +-> Disable 'hlsearch' highlights on start
"           |   |  |    |   |   +-> # lines to save from the search history
"           |   |  |    |   +-> # lines to save from the input line history
"           |   |  |    +-> # lines of command-line history
"           |   |  +-> Save up to # lines for each register
"           |   +-> Global marks
"           +-> marks for up to # previously edited files
" Remember things when we exit
" }}}
set directory=~/.vim/tmp        " Don't clutter up dirs with swp files
set backupdir=~/.vim/tmp        " nor tmp files
set history=500                 " keep 500 lines of command line history
set autoread                    " reload files only changed outside vim from disk
set autowrite                   " write before :next/:cnext
set ttyfast                     " you got a fast terminal
set ruler                       " show the cursor position all the time
set backspace=indent,eol,start  " allow backspacing over everything in insert mode
set showcmd                     " display incomplete commands
set wmh=0                       " minimum unfocussed window height
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set lazyredraw                  " prevent redraws while executing
set shiftwidth=2                " indent using 2 spaces
set expandtab                   " use spaces only
set smarttab                    " deindent with <BS>, start at indent level
set colorcolumn=80,115          " mark the 80th character, and (old and new) github code window width
set smartcase                   " ... unless they contain at least one capital letter
set scrolloff=5                 " don't show search results as the first line
set laststatus=2                " Always show status line.
set autoindent                  " always set autoindenting on
set shiftround                  " When at 3 spaces and I hit >>, go to 4, not 5.
set gdefault                    " assume the /g flag on :s
set wildmenu                    " Better? completion on command line
set wildmode=list:longest,full  " Completion settings
set tags+=.git/tags-includes    " Search for ctag file in .git/
set wildignore+=tags            " Don't complete from project code ctag file
set wildignore+=tags-includes   " Don't complete from includes code ctag file
set winaltkeys=no               " Let vim handle alt keys
set iskeyword+=-                " Let dash be a word character (css <3 dashes)
set list                        " Create a list & make invisible chars visible
set listchars=tab:⇁•,trail:•,extends:#,nbsp:•
set pastetoggle=<F2>            " Toggle paste/regular insert mode

" Ruby autocmds {{{
augroup myfiletypes
  " Clear old autocmds in group
  autocmd!
  " autoindent with two spaces, always expand tabs
  autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
  autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
  autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
  autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
  autocmd FileType ruby,eruby,yaml set ai sw=2 sts=2 et

  " Set up some useful Rails.vim bindings for working with Backbone.js
  autocmd User Rails Rnavcommand template    app/assets/templates               -glob=**/*  -suffix=.jst.ejs
  autocmd User Rails Rnavcommand jmodel      app/assets/javascripts/models      -glob=**/*  -suffix=.coffee
  autocmd User Rails Rnavcommand jview       app/assets/javascripts/views       -glob=**/*  -suffix=.coffee
  autocmd User Rails Rnavcommand jcollection app/assets/javascripts/collections -glob=**/*  -suffix=.coffee
  autocmd User Rails Rnavcommand jrouter     app/assets/javascripts/routers     -glob=**/*  -suffix=.coffee
  autocmd User Rails Rnavcommand jspec       spec/javascripts                   -glob=**/*  -suffix=.coffee
augroup END
" }}}

" Format xml files
autocmd FileType xml exe ":silent 1,$!xmllint --format --recover - 2>/dev/null"
" Don't add the comment prefix when I hit enter or o/O on a comment line.
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" When loading text files, wrap them and don't split up words.
autocmd BufNewFile,BufRead *.txt setlocal wrap
autocmd BufNewFile,BufRead *.txt setlocal lbr
autocmd BufRead,BufNewFile *.handlebars,*.hbs set ft=html syntax=handlebars
autocmd BufWinLeave * call clearmatches() " Fix some performance issues

" quick open some default locations
nnoremap <LEADER>bi :source ~/.dotfiles/lib/vim/vimrc<CR>:PluginInstall<CR>
nnoremap <LEADER>bx :tabe ~/Dropbox<CR>
" nnoremap <LEADER>sn :tabe ~/.vim/snippets/ruby.snippets<CR>
nnoremap <LEADER>vi :tabe ~/.dotfiles/lib/vim/vimrc<CR>
nnoremap <LEADER>tm :tabe ~/.dotfiles/lib/tmux.conf<CR>

nnoremap <LEADER>ds :tabe db/schema.rb<CR>
nnoremap <LEADER>dm :e db/migrate/<CR>GG

" quick insert/rewrite stuff {{{
nnoremap <LEADER>pa osave_and_open_page # DEBUG<ESC>
nnoremap <LEADER>de orequire 'pry'; binding.pry # DEBUG<ESC>
nnoremap <LEADER>db obefore { require 'pry'; binding.pry } # DEBUG<ESC>
nnoremap <LEADER>pu j^y$Oputs '<C-R>"' # DEBUG<ESC>
nnoremap <LEADER>rh oraise 'hell' # DEBUG<ESC>
nnoremap <LEADER>rw :%s/\s\+$//<CR>
nnoremap <LEADER>bo $F\|bdwi{ <ESC><S-J>A }<ESC>jdd
nnoremap <LEADER>bl $bdwa{<ESC><S-J>A }<ESC>jdd
" }}}

nnoremap <LEADER>q :q<CR>
nnoremap <LEADER>Q :qal<CR>
nnoremap <LEADER>bn :bn<CR>
nnoremap <LEADER>n :bn<CR>

" New tab/vsplit buffer {{{
nnoremap <LEADER>tn <ESC>:tabnew<CR>
" Edit another file in the same directory as the current file
" uses expression to extract path from current file's path
nmap <LEADER>te :vnew <C-R>=expand("%:p:h") . '/'<CR>
" }}}

nnoremap <LEADER>o :set paste!<CR>
nnoremap <LEADER>w :setlocal wrap!<CR>:setlocal wrap?<CR>

noremap <C-H> :noh<CR>
inoremap <C-L> :<SPACE>
noremap <C-S> <ESC>:w<CR>
inoremap <C-S> <ESC>:w<CR>
noremap <LEADER><LEADER> :w<CR>
noremap <F9> :set spell! spell?<CR>

" Emacs-like beginning and end of line.
inoremap <C-E> <C-O>$
inoremap <C-A> <C-O>^
noremap H ^
noremap L $

" Disable Ex mode
noremap Q <NOP>
" Disable K looking stuff up
noremap K <NOP><CR>
nnoremap <LEADER>f :grep!<SPACE>""<LEFT>
nnoremap <LEADER>F :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Center search matches when jumping
noremap N Nzz
noremap n nzz

command! Q q " Bind :Q to :q
command! Qall qall

runtime macros/matchit.vim
runtime! config/**/*.vim

" w!! - write a file using sudo _after_ starting vim {{{
cmap w!! w !sudo tee % >/dev/null
" }}}

function! s:Cursor_Moved() " {{{
  let cur_pos = winline()
  if g:last_pos == 0
    set cul
    let g:last_pos = cur_pos
    return
  endif
  let diff = g:last_pos - cur_pos
  if diff > 1 || diff < -1
    set cul
  else
    set nocul
  endif
  let g:last_pos = cur_pos
endfunction
autocmd CursorMoved,CursorMovedI * call s:Cursor_Moved()
let g:last_pos = 0
" }}}

" Merge a tab into a vsplit in the previous window {{{
function! MergeTabIntoVSplit()
  if tabpagenr() == 1
    return
  endif
  let bufferName = bufname("%")
  if tabpagenr("$") == tabpagenr()
    close!
  else
    close!
    tabprev
  endif
  vsplit
  execute "buffer " . bufferName
endfunction
nmap <C-W>u :call MergeTabIntoVSplit()<CR>
" }}}

function! RestoreCursorPosition() " {{{
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction
augroup restoreCursorPosition
  autocmd!
  autocmd BufWinEnter * call RestoreCursorPosition()
augroup END
" }}}

function! <SID>StripTrailingWhitespace() " {{{
  " Don't strip any spaces when the filetype is markdown
  if &ft =~ 'markdown'
    return
  endif
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespace()
" }}}
